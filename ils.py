# -*- coding: utf-8 -*-
"""ils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ov7hXwf3ZybmPRTFdvt2amNgVfbVJKjB
"""

#ILS
import random
import math

# Biblioteca para geração de graficos para facilitar visualizão
import matplotlib.pyplot as plt

MAX_NUMERO_DE_ITERACOES_ITERATED = 4000

def perturbar_solucao(solucao):
  solucao_modificada = copy.deepcopy(solucao)
  index = random.randint(0, NUMERO_DE_RAINHAS - 1)
  index_2 = random.randint(0, NUMERO_DE_RAINHAS - 1)

  posicao_1 = random.randint(0, NUMERO_DE_RAINHAS - 1)
  posicao_2 = random.randint(0, NUMERO_DE_RAINHAS - 1)

  while posicao_1 == solucao_modificada[index].x:
    posicao_1 = random.randint(0, NUMERO_DE_RAINHAS - 1)
  while posicao_2 == solucao_modificada[index_2].x:
    posicao_2 = random.randint(0, NUMERO_DE_RAINHAS - 1)

  solucao_modificada[index].x = posicao_1
  solucao_modificada[index_2].x = posicao_2
  
  return solucao_modificada

def executar_iterated_local_search():

  # É gerada uma solução inicial aleatoria
  solucao_atual = gerar_solucao_aleatoria_n_rainhas()

  # É calculado o fitness da solução incial
  melhor_fitness = fitness_n_rainhas(solucao_atual)

  # É definido um criterio de parada
  numero_de_iteracoes = MAX_NUMERO_DE_ITERACOES_ITERATED

  # print('Fitness Inicial: ', fitness_atual)

  # --- Inicio da execução do algoritimo ---

  # Criterio de parada
  for i in range(0, numero_de_iteracoes):

    # A solução é Perturbada
    nova_solucao = perturbar_solucao(solucao_atual)

    # Uma nova solução é gerada
    nova_solucao = mudar_solucao_n_rainhas(nova_solucao)

    # A nova solução é comparada com a anterior
    if fitness_n_rainhas(nova_solucao) < fitness_n_rainhas(solucao_atual):
      # Caso ela seja melhor a anterior é substituida pela nova
      solucao_atual.clear()
      for j in range(0, NUMERO_DE_RAINHAS):
        solucao_atual.append(nova_solucao[j])
      # e o melhor fitness é atualizado
      fitness_atual = fitness_n_rainhas(solucao_atual)
      if fitness_atual < melhor_fitness:
        melhor_fitness = fitness_atual

  return melhor_fitness